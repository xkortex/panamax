ARG SOURCE_IMAGE_REGISTRY=nvidia
ARG SOURCE_IMAGE_NAME=cuda
ARG SOURCE_IMAGE_TAG=10.0-cudnn7-devel-ubuntu18.04
FROM ${SOURCE_IMAGE_REGISTRY}/${SOURCE_IMAGE_NAME}:${SOURCE_IMAGE_TAG} as base
ARG SOURCE_IMAGE_REGISTRY
ARG SOURCE_IMAGE_NAME
ARG SOURCE_IMAGE_TAG
ENV SOURCE_IMAGE_REGISTRY=${SOURCE_IMAGE_REGISTRY} \
    SOURCE_IMAGE_NAME=${SOURCE_IMAGE_NAME} \
    SOURCE_IMAGE_TAG=${SOURCE_IMAGE_TAG}

# setup environment
ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8


# Bare-bones boilerplate system deps along with some technical libs
# tzdata must be installed with noninteractive in order to prevent interactive prompt
RUN    apt-get update -qq \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        curl \
        wget \
        apt-transport-https \
        software-properties-common \
        ca-certificates \
        git \
        openssl \
        tzdata \
    && rm -rf /var/lib/apt/lists/* # this is a docker idiom, it helps keep image sizes down

# Compilation / CV deps
RUN     apt-get update -qq \
    &&  apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            ninja-build \
            gfortran \
            libatlas-base-dev \
            libboost-all-dev \
            libgflags-dev \
            libgoogle-glog-dev \
            libhdf5-serial-dev \
            libleveldb-dev \
            liblmdb-dev \
            libprotobuf-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libsnappy-dev \
            libopenblas-base \
            libomp-dev \
            protobuf-compiler \
            python-dev \
            python3-dev \
    && rm -rf /var/lib/apt/lists/*

RUN     apt-get update -qq \
    &&  apt-get install -y --no-install-recommends \
            libopencv-dev \
            caffe-cuda \
    && rm -rf /var/lib/apt/lists/*